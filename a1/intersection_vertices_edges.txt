def find_intersections():
    """
    Finds the intersections on all lines in the existing streets(global)

    Args:
        None

    Outputs:
        Stdout/Stderr

    Returns:
        lines_with_intersections - dictionary:
                                   key: Line object
                                   values = set of intersections on the line

    Raises:
        None
    """
    if len(streets) < 1:
        return set()

    #int_point_for_lines = set()
    lines_with_intersections = dict()
    i=0
    lines_in_street = []

    # gets all the lines in a street
    # in the form: [{set of lines on street1}, {...s2}..]
    for key, val in streets.items():
        lines_in_street.append(val.get_lines())

    number_of_streets = len(lines_in_street)

    # Embarassing time complexity but gets the job done..
    # Goes through 1 street a time
    # Compares it with other streets
    for i in range(number_of_streets-1):
        if i+1 > number_of_streets-1:
            break
        for j in range(i+1, number_of_streets):
            # fetches the lines for both the streets being compared
            s1_lines = lines_in_street[i]
            s2_lines = lines_in_street[j]
            for line1 in s1_lines:
                for line2 in s2_lines:
                    # checks for intersections for all possiblities
                    int_point = intersect(line1, line2)
                    if int_point:
                        # if intersection is found using these 2 lines,
                        # updates both line object with intersection
                        line1.add_intersections(int_point.co)
                        line2.add_intersections(int_point.co)

    # goes through lines on each street
    # updates lines_with_intersections in the return format
    for lines in lines_in_street:
        for line in lines:
            lines_with_intersections[line] = line.intersections

    return lines_with_intersections

def get_vertices_and_edges(lines_with_intersections):
    """
    Determines the vertices and edges using lines_with_intersections

    Args:
        lines_with_intersections - dictionary:
                                   key: Line object
                                   values = set of intersections on the line

    Outputs:
        Stdout/Stderr

    Returns:
        vertices - set of coordinate points
        edges - set of tuples with coordinate points

    Raises:
        None
    """
    if not lines_with_intersections:
        return None, None

    vertices = set()
    edges = set()
    for line, intersections in lines_with_intersections.items():
        line_src_co = line.src.co
        line_dst_co = line.dst.co

        all_points_on_line = [line_src_co, line_dst_co] + list(intersections)
        # sort by y
        all_points_on_line = sorted(all_points_on_line, key=lambda x:x[1])
        # sort by x
        all_points_on_line = sorted(all_points_on_line, key=lambda x:x[0])

        if len(all_points_on_line) > 2:
            vertices.update({pt for pt in all_points_on_line})
            len_all_points_on_line = len(all_points_on_line)
            i = 0
            for i in range(len_all_points_on_line):
                if i == len_all_points_on_line -1:
                    break
                edges.add((all_points_on_line[i],all_points_on_line[i+1]))
                i = i+1

    return vertices, edges
